#!/bin/bash


users () {

hostname=""
username=""
userpasswd=""
rootpasswd=""

##########################
# USER
##########################
while true; do
username=$(dialog --title "${titleuser}" \
--nocancel --inputbox "${msg_username}" 14 65 3>&1 1>&2 2>&3)

    if [ $? -eq 0 ]; then
    #El nombre de usuario debe comenzar con una letra minúscula. 
    #Puede contener minúsculas alfanuméricas y guiones.
      if printf "%s" "$username" | grep -Eoq "^[a-z][a-z0-9-]*$" && [ "${#username}" -lt 20 ]; then
        
        # El archivo de nombre de usuario reservado contiene nombres de usuario que deben evitarse
        if grep -Fxq "$username" reserved_usernames ; then
          dialog --title "${title_reserved_usernames}" -msgbox "${msg_reserved_usernames}" 6 70
        
        else 
          
          inputs_match=false
          
          while ! $inputs_match; do

            input=$(dialog --title "${title_passwuser}" --clear \
              --stdout --nocancel --insecure --passwordbox "${msg_passwduser} $username:\n " 9 60)
            confirm_input=$(dialog --title "${title_passwuserconfirm} $username |-" \
              --clear --stdout --insecure --no-cancel --passwordbox "${msg_passwuserconfirm}" 10 55)

            if [ -z "$input" ]; then

              dialog --title "${title_passwusernull}" --msgbox "${msg_passwusernull}" 7 60
            
            elif [ "$input" != "$confirm_input" ]; then

              dialog --title "${title_error}" --msgbox "${msg_passwuserfail}" 7 60
            else
              userpasswd="$input"
              inputs_match=true
            fi
          done
          break
        fi
      else
        dialog --title "${title_userfail}" \
        --msgbox "${msg_userfail}" 11 80
      fi
    fi
  done



##########################
# HOSTNAME
##########################
while true; do
    hostname=$(dialog --backtitle "$titulo" --title "-| Hostname |-" --nocancel \
    --inputbox "\nUna sola palabra que identifica su sistema en la red. \
    \n\nPor favor ingrese el nombre de host para este sistema:\n " \
12 65 "ArcriS" 3>&1 1>&2 2>&3)


    # Hostname must be alpha-numeric and may contain a dash only in between
    if printf "%s" "$hostname" | grep -Eoq "^[a-zA-Z0-9-]{1,63}$" \
      && [ "${hostname:0:1}" != "-" ] \
      && [ "${hostname: -1}" != "-" ]; then
      break
    else
      dialog --backtitle "$titulo"  --title "-| ERROR: Formato de nombre no válido |-" \
        --msgbox "\nIngresó un nombre de host no válido. \n\nUn nombre de host válido puede \
contienen solo los números 0-9,\nletras mayúsculas y minúsculas (A-Z y a-z), y \
el signo menos.\n\nDebe tener como máximo 63 caracteres y no puede comenzar \no terminar con un signo menos." 12 68
    fi

  done


##########################
# PASSWD ROOT
##########################
inputs_match=false
  while ! $inputs_match; do
    input=$(dialog --title "Establecer la contraseña de root" --clear --stdout --nocancel \
      --insecure --passwordbox "Introduzca una contraseña para 'root',\n \
      la cuenta de administrador del sistema. \
      \n\nContraseña de root:" 10 50)
    confirm_input=$(dialog --title "Establecer la contraseña de root" --clear --stdout \
      --insecure --passwordbox "Vuelva a ingresar la contraseña para verificar:" 8 55)
        

    if [ -z "$input" ]; then
      dialog --title "ERROR: contraseña vacía" \
        --msgbox "No se le permite tener una contraseña vacía." 5 55
    elif [ "$input" != "$confirm_input" ]; then
      dialog --title "ERROR: las contraseñas no coinciden" \
        --msgbox "Las dos contraseñas que ha introducido no coinciden." 5 55
    else
      rootpasswd="$input"
      inputs_match=true
    fi
  done


##########################
# END
##########################
    clear
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
    echo -e ""
    echo -e "\t\t\t| Datos Ingresados |"
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
    echo -e ""
    echo ""

    echo Hostname:          $hostname
    echo Passwd ROOT:       $rootpasswd
    echo ""
    echo Nombre de Usuario:   $username
    echo Clave de Usuario :   $userpasswd
    echo -e ""
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
    echo -e ""
    echo -e "PRESIONA ENTER PARA CONFIRMAR..."
    read line
    echo ""

}